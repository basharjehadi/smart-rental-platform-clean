generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  name                     String
  email                    String                    @unique
  password                 String?
  role                     UserRole                  @default(TENANT)
  googleId                 String?                   @unique
  firstName                String?
  lastName                 String?
  pesel                    String?
  passportNumber           String?
  kartaPobytuNumber        String?
  phoneNumber              String?
  citizenship              String?
  dateOfBirth              DateTime?
  street                   String?
  city                     String?
  zipCode                  String?
  country                  String?
  profession               String?
  dowodOsobistyNumber      String?
  address                  String?
  profileImage             String?
  signatureBase64          String?
  identityDocument         String?
  isVerified               Boolean                   @default(false)
  kycStatus                KYCStatus                 @default(PENDING)
  kycSubmittedAt           DateTime?
  kycReviewedAt            DateTime?
  kycRejectionReason       String?
  kycReviewedBy            String?
  gdprConsent              Boolean                   @default(false)
  gdprConsentDate          DateTime?
  phoneVerified            Boolean                   @default(false)
  emailVerified            Boolean                   @default(false)
  isSuspended              Boolean                   @default(false)
  suspensionReason         String?
  suspendedAt              DateTime?
  availability             Boolean                   @default(true)
  autoAvailability         Boolean                   @default(true)
  maxTenants               Int                       @default(5)
  currentTenants           Int                       @default(0)
  lastActiveAt             DateTime                  @default(now())
  requestCount             Int                       @default(0)
  responseTime             Int?
  averageRating            Float?                   @default(5.0)
  totalReviews            Int                       @default(1)
  rank                    UserRank                  @default(NEW_USER)
  rankPoints              Int                       @default(0)
  rankUpdatedAt           DateTime                  @default(now())
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  conversationParticipants ConversationParticipant[] @relation("UserConversations")
  landlordProfile          LandlordProfile?          @relation("LandlordProfile")
  sentMessages             Message[]                 @relation("SentMessages")
  payments                 Payment[]                 @relation("UserPayments")
  rentPayments             RentPayment[]             @relation("TenantRentPayments")
  reviewsGiven            Review[]                  @relation("UserReviewsGiven")
  notifications            Notification[]            @relation("UserNotifications")
  supportTickets          SupportTicket[]           @relation("UserSupportTickets")
  ticketMessages          TicketMessage[]           @relation("UserTicketMessages")
  chatSessions            ChatSession[]             @relation("UserChatSessions")
  organizationMembers      OrganizationMember[]      @relation("UserOrganizations")
  tenantGroups             TenantGroupMember[]      @relation("UserTenantGroups")

  @@index([role, availability, autoAvailability, currentTenants])
  @@index([email])
  @@index([lastActiveAt])
  @@map("users")
}

model LandlordProfile {
  id                  String   @id @default(cuid())
  preferredLocations  String?
  maxBudget           Float?
  minBudget           Float?
  maxTenants          Int      @default(5)
  currentTenants      Int      @default(0)
  manualAvailability  Boolean  @default(true)
  autoAvailability    Boolean  @default(true)
  propertyTypes       String?
  amenities           String?
  propertyRules       String?
  propertyDescription String?
  propertyImages      String?
  propertyVideos      String?
  autoFillMedia       Boolean  @default(true)
  autoFillRules       Boolean  @default(true)
  autoFillDescription Boolean  @default(true)
  autoResponse        Boolean  @default(false)
  responseTemplate    String?
  averageResponseTime Int?
  acceptanceRate      Float?
  userId              String   @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation("LandlordProfile", fields: [userId], references: [id], onDelete: Cascade)

  @@index([preferredLocations])
  @@index([maxBudget, minBudget])
  @@index([maxTenants, currentTenants])
  @@index([manualAvailability, autoAvailability])
  @@map("landlord_profiles")
}

model Property {
  id                String         @id @default(cuid())
  name              String
  address           String
  city              String
  district          String?
  zipCode           String
  country           String         @default("Poland")
  propertyType      String
  bedrooms          Int?
  bathrooms         Int?
  size              Float?
  floor             Int?
  totalFloors       Int?
  monthlyRent       Float
  depositAmount     Float?
  utilitiesIncluded Boolean        @default(false)
  availableFrom     DateTime?
  availableUntil    DateTime?
  furnished         Boolean        @default(false)
  parking           Boolean        @default(false)
  petsAllowed       Boolean        @default(false)
  smokingAllowed    Boolean        @default(false)
  status            PropertyStatus @default(AVAILABLE)
  availability      Boolean        @default(true)
  maxTenants        Int            @default(1)
  currentTenants    Int            @default(0)
  description       String?
  houseRules        String?
  images            String?
  videos            String?
  latitude          Float?
  longitude         Float?
  organizationId    String
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  isMarketing       Boolean        @default(false)
  conversations     Conversation[] @relation("PropertyConversations")
  offers            Offer[]        @relation("PropertyOffers")
  matches           LandlordRequestMatch[]
  organization      Organization   @relation("OrganizationProperties", fields: [organizationId], references: [id], onDelete: Cascade)
  units             Unit[]         @relation("PropertyUnits")
  leases            Lease[]        @relation("PropertyLeases")

  @@index([organizationId, status])
  @@index([city, status])
  @@index([propertyType, status])
  @@index([monthlyRent, status])
  @@map("properties")
}

model RentalRequest {
  id                     Int                    @id @default(autoincrement())
  title                  String
  description            String
  location               String
  moveInDate             DateTime
  budget                 Float
  budgetFrom             Float?
  budgetTo               Float?
  propertyType           String?
  district               String?
  bedrooms               Int?
  bathrooms              Int?
  furnished              Boolean                @default(false)
  status                 RentalRequestStatus    @default(ACTIVE)
  isLocked               Boolean                @default(false)
  additionalRequirements String?
  preferredNeighborhood  String?
  maxCommuteTime         String?
  mustHaveFeatures       String?
  flexibleOnMoveInDate   Boolean                @default(false)
  poolStatus             RequestPoolStatus      @default(ACTIVE)
  matchScore             Float?
  viewCount              Int                    @default(0)
  responseCount          Int                    @default(0)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  expiresAt              DateTime?
  tenantGroupId          String
  parking                Boolean?               @default(false)
  petsAllowed            Boolean?               @default(false)
  contractSignature      ContractSignature?     @relation("ContractSignature")
  contract               Contract?              @relation("Contract")
  landlordRequestMatches LandlordRequestMatch[] @relation("RequestMatches")
  offers                 Offer[]                @relation("RequestOffer")
  payments               Payment[]              @relation("RequestPayments")
  tenantGroup            TenantGroup            @relation("TenantGroupRequests", fields: [tenantGroupId], references: [id], onDelete: Cascade)
  leases                 Lease[]                @relation("RentalRequestLeases")

  @@index([location, status, poolStatus])
  @@index([budget, status])
  @@index([createdAt, poolStatus])
  @@index([tenantGroupId, status])
  @@map("rental_requests")
}

model Offer {
  id                      String          @id @default(cuid())
  rentAmount              Float
  depositAmount           Float?
  leaseDuration           Int
  description             String?
  utilitiesIncluded       Boolean         @default(false)
  availableFrom           DateTime
  status                  OfferStatus     @default(PENDING)
  isPaid                  Boolean         @default(false)
  paymentIntentId         String?
  paymentDate             DateTime?
  leaseStartDate          DateTime?
  leaseEndDate            DateTime?
  propertyAddress         String?
  propertyImages          String?
  propertyVideo           String?
  propertyType            String?
  propertySize            String?
  propertyAmenities       String?
  propertyDescription     String?
  rulesText               String?
  rulesPdf                String?
  preferredPaymentGateway PaymentGateway?
  responseTime            Int?
  matchScore              Float?
  // Move-in verification fields
  moveInVerificationStatus   MoveInVerificationStatus @default(PENDING)
  moveInVerificationDeadline DateTime?
  moveInVerificationDate     DateTime?
  cancellationReason         String?
  cancellationEvidence       String[]
  verificationNotes          String?
  createdAt               DateTime        @default(now())
  updatedAt               DateTime        @updatedAt
  rentalRequestId         Int
  tenantGroupId           String
  organizationId          String
  propertyId              String?
  tenantGroup             TenantGroup    @relation("TenantGroupOffers", fields: [tenantGroupId], references: [id], onDelete: Cascade)
  organization            Organization    @relation("OrganizationOffers", fields: [organizationId], references: [id], onDelete: Cascade)
  property                Property?       @relation("PropertyOffers", fields: [propertyId], references: [id])
  rentalRequest           RentalRequest   @relation("RequestOffer", fields: [rentalRequestId], references: [id], onDelete: Cascade)
  payments                Payment[]       @relation("OfferPayments")
  conversations           Conversation[]  @relation("ConversationOffer")
  leases                  Lease[]         @relation("OfferLeases")

  @@index([tenantGroupId, status])
  @@index([organizationId, status])
  @@index([rentalRequestId, status])
  @@index([status, createdAt])
  @@index([propertyId])
  @@map("offers")
}

enum MoveInVerificationStatus {
  PENDING
  SUCCESS
  ISSUE_REPORTED
  CANCELLED
}

model Payment {
  id              String         @id @default(cuid())
  amount          Float
  currency        String         @default("PLN")
  status          PaymentStatus  @default(PENDING)
  paymentIntentId String?        @unique
  purpose         PaymentPurpose
  gateway         PaymentGateway
  processingTime  Int?
  retryCount      Int            @default(0)
  errorMessage    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  paidAt          DateTime?
  userId          String         // User who made the payment
  tenantGroupId   String
  rentalRequestId Int?
  offerId         String?
  leaseId         String?
  user            User           @relation("UserPayments", fields: [userId], references: [id], onDelete: Cascade)
  lease           Lease?         @relation("LeasePayments", fields: [leaseId], references: [id])
  offer           Offer?         @relation("OfferPayments", fields: [offerId], references: [id])
  rentalRequest   RentalRequest? @relation("RequestPayments", fields: [rentalRequestId], references: [id])
  tenantGroup     TenantGroup    @relation("TenantGroupPayments", fields: [tenantGroupId], references: [id], onDelete: Cascade)
  rentPayments    RentPayment[]  @relation("PaymentRentPayments")

  @@index([userId, status])
  @@index([tenantGroupId, status])
  @@index([status, createdAt])
  @@index([paymentIntentId])
  @@map("payments")
}

model RentPayment {
  id            String        @id @default(cuid())
  amount        Float
  status        PaymentStatus @default(PENDING)
  dueDate       DateTime
  paidDate      DateTime?
  month         Int
  year          Int
  lateFee       Float         @default(0)
  gracePeriod   Int           @default(5)
  isOverdue     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String        // User who is responsible for this rent payment
  tenantGroupId String
  paymentId     String?
  user          User          @relation("TenantRentPayments", fields: [userId], references: [id], onDelete: Cascade)
  payment       Payment?      @relation("PaymentRentPayments", fields: [paymentId], references: [id])
  tenantGroup   TenantGroup   @relation("TenantGroupRentPayments", fields: [tenantGroupId], references: [id], onDelete: Cascade)

  @@index([userId, month, year])
  @@index([tenantGroupId, month, year])
  @@index([status, dueDate])
  @@index([isOverdue, dueDate])
  @@map("rent_payments")
}

model ContractSignature {
  id              String        @id @default(cuid())
  signature       String
  signedAt        DateTime      @default(now())
  rentalRequestId Int           @unique
  rentalRequest   RentalRequest @relation("ContractSignature", fields: [rentalRequestId], references: [id], onDelete: Cascade)

  @@map("contract_signatures")
}

model Contract {
  id              String         @id @default(cuid())
  contractNumber  String         @unique
  status          ContractStatus @default(SIGNED)
  pdfUrl          String?
  signedAt        DateTime?
  generationTime  Int?
  fileSize        Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  rentalRequestId Int            @unique
  rentalRequest   RentalRequest  @relation("Contract", fields: [rentalRequestId], references: [id], onDelete: Cascade)

  @@index([status, signedAt])
  @@index([contractNumber])
  @@map("contracts")
}

model RequestPoolAnalytics {
  id                  String   @id @default(cuid())
  totalRequests       Int      @default(0)
  activeRequests      Int      @default(0)
  matchedRequests     Int      @default(0)
  expiredRequests     Int      @default(0)
  averageResponseTime Int?
  averageMatchScore   Float?
  conversionRate      Float?
  location            String
  requestCount        Int      @default(0)
  landlordCount       Int      @default(0)
  date                DateTime @default(now())

  @@index([location, date])
  @@index([date])
  @@map("request_pool_analytics")
}

model LandlordRequestMatch {
  id              String        @id @default(cuid())
  matchScore      Float
  matchReason     String?
  status          String        @default("ACTIVE")
  isViewed        Boolean       @default(false)
  isResponded     Boolean       @default(false)
  organizationId  String
  rentalRequestId Int
  /// Property anchoring: optional specific property this match refers to
  propertyId      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  organization   Organization  @relation("LandlordMatches", fields: [organizationId], references: [id], onDelete: Cascade)
  rentalRequest   RentalRequest @relation("RequestMatches", fields: [rentalRequestId], references: [id], onDelete: Cascade)
  property        Property?     @relation(fields: [propertyId], references: [id])

  // Allow multiple matches per organization/request by property
  @@unique([organizationId, rentalRequestId, propertyId])
  @@index([organizationId, matchScore])
  @@index([rentalRequestId, matchScore])
  @@index([isViewed, isResponded])
  @@index([propertyId])
  @@map("landlord_request_matches")
}

model Unit {
  id         String         @id @default(cuid())
  unitNumber String
  floor      Int?
  bedrooms   Int
  bathrooms  Int
  area       Float
  rentAmount Float
  status     PropertyStatus @default(AVAILABLE)
  propertyId String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  lease      Lease?         @relation("UnitLease")
  property   Property       @relation("PropertyUnits", fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId, status])
  @@map("units")
}

model Lease {
  id                  String               @id @default(cuid())
  startDate           DateTime
  endDate             DateTime
  rentAmount          Float
  depositAmount       Float
  status              LeaseStatus          @default(ACTIVE)
  tenantGroupId       String
  unitId              String               @unique
  // Links back to booking context (optional for legacy compatibility)
  rentalRequestId     Int?
  offerId             String?
  propertyId          String?
  // Business tenant support
  organizationId      String?
  // Termination/renewal fields
  terminationNoticeByUserId String?
  terminationNoticeDate     DateTime?
  terminationEffectiveDate  DateTime?
  terminationReason         String?
  renewalStatus             LeaseRenewalStatus @default(NONE)
  renewalDeclinedAt         DateTime?
  renewalDeclinedByUserId   String?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  tenantGroup         TenantGroup          @relation("TenantGroupLeases", fields: [tenantGroupId], references: [id], onDelete: Cascade)
  unit                Unit                 @relation("UnitLease", fields: [unitId], references: [id], onDelete: Cascade)
  rentalRequest       RentalRequest?       @relation("RentalRequestLeases", fields: [rentalRequestId], references: [id])
  offer               Offer?               @relation("OfferLeases", fields: [offerId], references: [id])
  property            Property?            @relation("PropertyLeases", fields: [propertyId], references: [id])
  organization        Organization?        @relation("OrganizationLeases", fields: [organizationId], references: [id])
  maintenanceRequests MaintenanceRequest[] @relation("LeaseMaintenance")
  payments            Payment[]            @relation("LeasePayments")
  reviews             Review[]             @relation("LeaseReviews")
  renewalRequests     RenewalRequest[]
  occupants           Occupant[]

  @@index([tenantGroupId])
  @@index([status])
  @@index([endDate])
  @@index([offerId])
  @@index([rentalRequestId])
  @@index([propertyId])
  @@index([organizationId])
  @@map("leases")
}

model Occupant {
  id        String   @id @default(cuid())
  name      String
  email     String?
  phoneNumber String?
  leaseId   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  lease     Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId])
  @@index([email])
  @@map("occupants")
}

model RenewalRequest {
  id                  String   @id @default(cuid())
  leaseId             String
  initiatorUserId     String
  status              RenewalRequestStatus @default(PENDING)
  proposedTermMonths  Int?
  proposedStartDate   DateTime?
  proposedMonthlyRent Float?
  note                String?
  counterOfId         String?
  expiresAt           DateTime?
  decidedByUserId     String?
  decidedAt           DateTime?
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  lease               Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId, status])
  @@index([expiresAt])
  @@map("renewal_requests")
}

enum RenewalRequestStatus {
  PENDING
  COUNTERED
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

model Review {
  id                    String   @id @default(cuid())
  rating                Int
  comment               String
  isAnonymous           Boolean  @default(false)
  reviewerId            String   // Who is giving the review
  targetTenantGroupId   String   // Which tenant group is being reviewed
  leaseId               String?
  reviewStage           ReviewStage @default(INITIAL)
  isSystemGenerated     Boolean  @default(false)
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  lease                 Lease?   @relation("LeaseReviews", fields: [leaseId], references: [id], onDelete: Cascade)
  reviewer              User     @relation("UserReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  targetTenantGroup     TenantGroup @relation("TenantGroupReviewsReceived", fields: [targetTenantGroupId], references: [id], onDelete: Cascade)

  @@index([leaseId])
  @@index([rating])
  @@index([reviewStage])
  @@index([reviewerId])
  @@index([targetTenantGroupId])
  @@map("reviews")
}

model MaintenanceRequest {
  id          String              @id @default(cuid())
  title       String
  description String
  priority    MaintenancePriority @default(MEDIUM)
  status      MaintenanceStatus   @default(PENDING)
  leaseId     String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  lease       Lease               @relation("LeaseMaintenance", fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId, status])
  @@index([priority])
  @@map("maintenance_requests")
}

model Conversation {
  id           String                    @id @default(cuid())
  title        String?
  type         ConversationType          @default(DIRECT)
  propertyId   String?
  offerId      String?
  status       ConversationStatus        @default(PENDING)
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[] @relation("ConversationParticipants")
  property     Property?                 @relation("PropertyConversations", fields: [propertyId], references: [id])
  offer        Offer?                    @relation("ConversationOffer", fields: [offerId], references: [id])
  messages     Message[]                 @relation("ConversationMessages")

  @@index([propertyId])
  @@index([type])
  @@index([status])
  @@index([offerId])
  @@index([status, offerId])
  @@map("conversations")
}

model ConversationParticipant {
  id             String          @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  leftAt         DateTime?
  conversation   Conversation    @relation("ConversationParticipants", fields: [conversationId], references: [id], onDelete: Cascade)
  user           User            @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

model Message {
  id             String       @id @default(cuid())
  content        String
  messageType    MessageType  @default(TEXT)
  attachmentUrl  String?
  attachmentName String?
  attachmentSize Int?
  attachmentType String?
  isRead         Boolean      @default(false)
  readAt         DateTime?
  conversationId String
  senderId       String
  replyToId      String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversation   Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  replyTo        Message?     @relation("MessageReplies", fields: [replyToId], references: [id])
  replies        Message[]    @relation("MessageReplies")
  sender         User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([isRead])
  @@map("messages")
}

model Notification {
  id          String           @id @default(cuid())
  userId      String
  type        NotificationType
  entityId    String
  title       String
  body        String
  isRead      Boolean          @default(false)
  createdAt   DateTime         @default(now())
  user        User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)
  @@index([userId, isRead, createdAt])
  @@map("notifications")
}

model SupportTicket {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation("UserSupportTickets", fields: [userId], references: [id], onDelete: Cascade)
  title       String
  description String
  category    SupportTicketCategory
  priority    SupportTicketPriority
  status      SupportTicketStatus @default(OPEN)
  assignedTo  String?  // Support agent ID
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  messages    TicketMessage[]

  @@index([userId, status])
  @@index([category, priority])
  @@map("support_tickets")
}

model TicketMessage {
  id         String   @id @default(cuid())
  ticketId   String
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  userId     String   // User who sent the message
  user       User     @relation("UserTicketMessages", fields: [userId], references: [id], onDelete: Cascade)
  message    String
  isInternal Boolean  @default(false) // For support team internal notes
  createdAt  DateTime @default(now())

  @@index([ticketId, createdAt])
  @@map("ticket_messages")
}

model ChatSession {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation("UserChatSessions", fields: [userId], references: [id], onDelete: Cascade)
  agentId   String?  // Support agent assigned
  status    ChatSessionStatus @default(WAITING)
  startedAt DateTime @default(now())
  endedAt   DateTime?
  messages  ChatMessage[]

  @@index([userId, status])
  @@map("chat_sessions")
}

model ChatMessage {
  id        String   @id @default(cuid())
  sessionId String
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)
  senderId  String   // User ID or 'support'
  message   String
  timestamp DateTime @default(now())
  isRead    Boolean  @default(false)

  @@index([sessionId, timestamp])
  @@map("chat_messages")
}

model Organization {
  id              String   @id @default(cuid())
  name            String
  taxId           String?  // NIP number
  regNumber       String?  // KRS/REGON number
  address         String
  signatureBase64 String?  // Pre-saved signature
  isPersonal      Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  members         OrganizationMember[]
  properties      Property[] @relation("OrganizationProperties")
  leases          Lease[]  @relation("OrganizationLeases")
  offers          Offer[]  @relation("OrganizationOffers")
  landlordRequestMatches LandlordRequestMatch[] @relation("LandlordMatches")

  @@index([name])
  @@index([taxId])
  @@index([regNumber])
  @@map("organizations")
}

model OrganizationMember {
  id             String           @id @default(cuid())
  userId         String
  organizationId String
  role           MemberRole       @default(AGENT)
  joinedAt       DateTime         @default(now())
  leftAt         DateTime?
  user           User             @relation("UserOrganizations", fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization     @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([role])
  @@map("organization_members")
}

model TenantGroup {
  id        String   @id @default(cuid())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  members   TenantGroupMember[]
  rentalRequests RentalRequest[] @relation("TenantGroupRequests")
  offers    Offer[] @relation("TenantGroupOffers")
  leases    Lease[] @relation("TenantGroupLeases")
  payments  Payment[] @relation("TenantGroupPayments")
  rentPayments RentPayment[] @relation("TenantGroupRentPayments")
  reviews   Review[] @relation("TenantGroupReviewsReceived")

  @@index([name])
  @@map("tenant_groups")
}

model TenantGroupMember {
  id            String      @id @default(cuid())
  userId        String
  tenantGroupId String
  isPrimary     Boolean     @default(false) // Designates the group lead
  joinedAt      DateTime    @default(now())
  leftAt        DateTime?
  user          User        @relation("UserTenantGroups", fields: [userId], references: [id], onDelete: Cascade)
  tenantGroup   TenantGroup @relation(fields: [tenantGroupId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantGroupId])
  @@index([userId])
  @@index([tenantGroupId])
  @@index([isPrimary])
  @@map("tenant_group_members")
}

enum UserRole {
  TENANT
  LANDLORD
  ADMIN
}

enum RentalRequestStatus {
  ACTIVE
  LOCKED
  MATCHED
  COMPLETED
  CANCELLED
}

enum RequestPoolStatus {
  ACTIVE
  MATCHED
  EXPIRED
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  PAID
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum PaymentPurpose {
  DEPOSIT
  RENT
  DEPOSIT_AND_FIRST_MONTH
}

enum ContractStatus {
  SIGNED
  COMPLETED
  EXPIRED
}

enum PaymentGateway {
  STRIPE
  PAYU
  P24
  TPAY
}

enum PropertyStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RENTED
  UNAVAILABLE
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
  NOT_SUBMITTED
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING
}

enum LeaseRenewalStatus {
  NONE
  DECLINED
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReviewStage {
  INITIAL
  PAYMENT_COMPLETED
  MOVE_IN
  LEASE_END
}

enum ConversationType {
  DIRECT
  GROUP
  PROPERTY
}

enum ParticipantRole {
  ADMIN
  MEMBER
  READONLY
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  SYSTEM
}

enum ConversationStatus {
  PENDING
  ACTIVE
  ARCHIVED
}

enum NotificationType {
  NEW_RENTAL_REQUEST
  NEW_OFFER
  PAYMENT_CONFIRMED
  PAYMENT_FAILED
  CONTRACT_UPDATED
  CONTRACT_SIGNED
  KYC_APPROVED
  KYC_REJECTED
  PROPERTY_STATUS_CHANGED
  SYSTEM_ANNOUNCEMENT
  ACCOUNT_UPDATED
}

enum SupportTicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  EMERGENCY
  PROPERTY_ISSUE
  PAYMENT_ISSUE
}

enum SupportTicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ChatSessionStatus {
  WAITING
  ACTIVE
  ENDED
}

enum MemberRole {
  OWNER
  ADMIN
  AGENT
}

enum UserRank {
  NEW_USER
  BRONZE_TENANT
  SILVER_TENANT
  GOLD_TENANT
  PLATINUM_TENANT
  BRONZE_LANDLORD
  SILVER_LANDLORD
  GOLD_LANDLORD
  PLATINUM_LANDLORD
  DIAMOND_LANDLORD
}
