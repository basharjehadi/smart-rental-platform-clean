generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       String                    @id @default(cuid())
  name                     String
  email                    String                    @unique
  password                 String?
  role                     UserRole                  @default(TENANT)
  googleId                 String?                   @unique
  firstName                String?
  lastName                 String?
  pesel                    String?
  passportNumber           String?
  kartaPobytuNumber        String?
  phoneNumber              String?
  citizenship              String?
  dateOfBirth              DateTime?
  street                   String?
  city                     String?
  zipCode                  String?
  country                  String?
  profession               String?
  dowodOsobistyNumber      String?
  address                  String?
  profileImage             String?
  signatureBase64          String?
  identityDocument         String?
  isVerified               Boolean                   @default(false)
  kycStatus                KYCStatus                 @default(PENDING)
  kycSubmittedAt           DateTime?
  kycReviewedAt            DateTime?
  kycRejectionReason       String?
  kycReviewedBy            String?
  gdprConsent              Boolean                   @default(false)
  gdprConsentDate          DateTime?
  phoneVerified            Boolean                   @default(false)
  emailVerified            Boolean                   @default(false)
  isSuspended              Boolean                   @default(false)
  suspensionReason         String?
  suspendedAt              DateTime?
  availability             Boolean                   @default(true)
  autoAvailability         Boolean                   @default(true)
  maxTenants               Int                       @default(5)
  currentTenants           Int                       @default(0)
  lastActiveAt             DateTime                  @default(now())
  requestCount             Int                       @default(0)
  responseTime             Int?
  createdAt                DateTime                  @default(now())
  updatedAt                DateTime                  @updatedAt
  averageRating            Float?                    @default(5.0)
  totalReviews             Int                       @default(1)
  rank                     UserRank                  @default(NEW_USER)
  rankPoints               Int                       @default(0)
  rankUpdatedAt            DateTime                  @default(now())
  badgeCount               Int                       @default(0)
  anonymizedAt             DateTime?
  deletedAt                DateTime?
  isDeleted                Boolean                   @default(false)
  adminAuditLogs           AuditLog[]                @relation("AdminAuditLogs")
  chatSessions             ChatSession[]             @relation("UserChatSessions")
  conversationParticipants ConversationParticipant[] @relation("UserConversations")
  landlordProfile          LandlordProfile?          @relation("LandlordProfile")
  sentMessages             Message[]                 @relation("SentMessages")
  notifications            Notification[]            @relation("UserNotifications")
  organizationMembers      OrganizationMember[]      @relation("UserOrganizations")
  payments                 Payment[]                 @relation("UserPayments")
  rentPayments             RentPayment[]             @relation("TenantRentPayments")
  reviewReplies            ReviewReply[]             @relation("UserReviewReplies")
  reviewReports            ReviewReport[]            @relation("UserReviewReports")
  reviewsGiven             Review[]                  @relation("UserReviewsGiven")
  reviewsReceived          Review[]                  @relation("UserReviewsReceived")
  supportTickets           SupportTicket[]           @relation("UserSupportTickets")
  tenantGroups             TenantGroupMember[]       @relation("UserTenantGroups")
  ticketMessages           TicketMessage[]           @relation("UserTicketMessages")
  userBadges               UserBadge[]               @relation("UserBadges")
  moveInIssueComments      MoveInIssueComment[]      @relation("UserMoveInIssueComments")

  @@index([role, availability, autoAvailability, currentTenants])
  @@index([email])
  @@index([lastActiveAt])
  @@map("users")
}

model LandlordProfile {
  id                  String   @id @default(cuid())
  preferredLocations  String?
  maxBudget           Float?
  minBudget           Float?
  maxTenants          Int      @default(5)
  currentTenants      Int      @default(0)
  manualAvailability  Boolean  @default(true)
  autoAvailability    Boolean  @default(true)
  propertyTypes       String?
  amenities           String?
  propertyRules       String?
  propertyDescription String?
  propertyImages      String?
  propertyVideos      String?
  autoFillMedia       Boolean  @default(true)
  autoFillRules       Boolean  @default(true)
  autoFillDescription Boolean  @default(true)
  autoResponse        Boolean  @default(false)
  responseTemplate    String?
  averageResponseTime Int?
  acceptanceRate      Float?
  userId              String   @unique
  createdAt           DateTime @default(now())
  updatedAt           DateTime @updatedAt
  user                User     @relation("LandlordProfile", fields: [userId], references: [id], onDelete: Cascade)

  @@index([preferredLocations])
  @@index([maxBudget, minBudget])
  @@index([maxTenants, currentTenants])
  @@index([manualAvailability, autoAvailability])
  @@map("landlord_profiles")
}

model Property {
  id                String                 @id @default(cuid())
  name              String
  address           String
  city              String
  district          String?
  zipCode           String
  country           String                 @default("Poland")
  propertyType      String
  bedrooms          Int?
  bathrooms         Int?
  size              Float?
  floor             Int?
  totalFloors       Int?
  monthlyRent       Float
  depositAmount     Float?
  utilitiesIncluded Boolean                @default(false)
  availableFrom     DateTime?
  availableUntil    DateTime?
  furnished         Boolean                @default(false)
  parking           Boolean                @default(false)
  petsAllowed       Boolean                @default(false)
  smokingAllowed    Boolean                @default(false)
  status            PropertyStatus         @default(AVAILABLE)
  maxTenants        Int                    @default(1)
  currentTenants    Int                    @default(0)
  description       String?
  houseRules        String?
  images            String?
  videos            String?
  latitude          Float?
  longitude         Float?
  createdAt         DateTime               @default(now())
  updatedAt         DateTime               @updatedAt
  availability      Boolean                @default(true)
  isMarketing       Boolean                @default(false)
  organizationId    String
  conversations     Conversation[]         @relation("PropertyConversations")
  matches           LandlordRequestMatch[]
  leases            Lease[]                @relation("PropertyLeases")
  offers            Offer[]                @relation("PropertyOffers")
  organization      Organization           @relation("OrganizationProperties", fields: [organizationId], references: [id], onDelete: Cascade)
  units             Unit[]                 @relation("PropertyUnits")

  @@index([organizationId, status])
  @@index([city, status])
  @@index([propertyType, status])
  @@index([monthlyRent, status])
  @@index([status, availability, city])
  @@index([status, availability, monthlyRent])
  @@index([status, availability, availableFrom])
  @@map("properties")
}

model RentalRequest {
  id                     Int                    @id @default(autoincrement())
  title                  String
  description            String
  location               String
  moveInDate             DateTime
  budget                 Float
  budgetFrom             Float?
  budgetTo               Float?
  propertyType           String?
  district               String?
  bedrooms               Int?
  bathrooms              Int?
  furnished              Boolean                @default(false)
  status                 RentalRequestStatus    @default(ACTIVE)
  isLocked               Boolean                @default(false)
  additionalRequirements String?
  preferredNeighborhood  String?
  maxCommuteTime         String?
  mustHaveFeatures       String?
  flexibleOnMoveInDate   Boolean                @default(false)
  poolStatus             RequestPoolStatus      @default(ACTIVE)
  matchScore             Float?
  viewCount              Int                    @default(0)
  responseCount          Int                    @default(0)
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  expiresAt              DateTime?
  parking                Boolean?               @default(false)
  petsAllowed            Boolean?               @default(false)
  tenantGroupId          String
  contractSignature      ContractSignature?     @relation("ContractSignature")
  contract               Contract?              @relation("Contract")
  landlordRequestMatches LandlordRequestMatch[] @relation("RequestMatches")
  leases                 Lease[]                @relation("RentalRequestLeases")
  offers                 Offer[]                @relation("RequestOffer")
  payments               Payment[]              @relation("RequestPayments")
  tenantGroup            TenantGroup            @relation("TenantGroupRequests", fields: [tenantGroupId], references: [id], onDelete: Cascade)

  @@index([location, status, poolStatus])
  @@index([budget, status])
  @@index([createdAt, poolStatus])
  @@index([tenantGroupId, status])
  @@index([poolStatus, expiresAt])
  @@index([poolStatus, createdAt])
  @@index([poolStatus, expiresAt, location])
  @@map("rental_requests")
}

model Offer {
  id                         String                   @id @default(cuid())
  rentAmount                 Float
  depositAmount              Float?
  leaseDuration              Int
  description                String?
  utilitiesIncluded          Boolean                  @default(false)
  availableFrom              DateTime
  status                     OfferStatus              @default(PENDING)
  isPaid                     Boolean                  @default(false)
  paymentIntentId            String?
  paymentDate                DateTime?
  leaseStartDate             DateTime?
  leaseEndDate               DateTime?
  propertyAddress            String?
  propertyImages             String?
  propertyVideo              String?
  propertyType               String?
  propertySize               String?
  propertyAmenities          String?
  propertyDescription        String?
  rulesText                  String?
  rulesPdf                   String?
  preferredPaymentGateway    PaymentGateway?
  responseTime               Int?
  matchScore                 Float?
  createdAt                  DateTime                 @default(now())
  updatedAt                  DateTime                 @updatedAt
  rentalRequestId            Int
  propertyId                 String?
  cancellationEvidence       String[]
  cancellationReason         String?
  moveInVerificationDate     DateTime?
  moveInVerificationDeadline DateTime?
  moveInVerificationStatus   MoveInVerificationStatus @default(PENDING)
  verificationNotes          String?
  organizationId             String
  tenantGroupId              String
  conversations              Conversation[]           @relation("ConversationOffer")
  leases                     Lease[]                  @relation("OfferLeases")
  organization               Organization             @relation("OrganizationOffers", fields: [organizationId], references: [id], onDelete: Cascade)
  property                   Property?                @relation("PropertyOffers", fields: [propertyId], references: [id])
  rentalRequest              RentalRequest            @relation("RequestOffer", fields: [rentalRequestId], references: [id], onDelete: Cascade)
  tenantGroup                TenantGroup              @relation("TenantGroupOffers", fields: [tenantGroupId], references: [id], onDelete: Cascade)
  payments                   Payment[]                @relation("OfferPayments")

  @@index([tenantGroupId, status])
  @@index([organizationId, status])
  @@index([rentalRequestId, status])
  @@index([status, createdAt])
  @@index([propertyId])
  @@map("offers")
}

model Payment {
  id              String         @id @default(cuid())
  amount          Float
  currency        String         @default("PLN")
  status          PaymentStatus  @default(PENDING)
  paymentIntentId String?        @unique
  purpose         PaymentPurpose
  gateway         PaymentGateway
  processingTime  Int?
  retryCount      Int            @default(0)
  errorMessage    String?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  paidAt          DateTime?
  userId          String
  rentalRequestId Int?
  offerId         String?
  leaseId         String?
  tenantGroupId   String
  lease           Lease?         @relation("LeasePayments", fields: [leaseId], references: [id])
  offer           Offer?         @relation("OfferPayments", fields: [offerId], references: [id])
  rentalRequest   RentalRequest? @relation("RequestPayments", fields: [rentalRequestId], references: [id])
  tenantGroup     TenantGroup    @relation("TenantGroupPayments", fields: [tenantGroupId], references: [id], onDelete: Cascade)
  user            User           @relation("UserPayments", fields: [userId], references: [id], onDelete: Cascade)
  rentPayments    RentPayment[]  @relation("PaymentRentPayments")

  @@index([userId, status])
  @@index([tenantGroupId, status])
  @@index([status, createdAt])
  @@index([paymentIntentId])
  @@map("payments")
}

model RentPayment {
  id            String        @id @default(cuid())
  amount        Float
  status        PaymentStatus @default(PENDING)
  dueDate       DateTime
  paidDate      DateTime?
  month         Int
  year          Int
  lateFee       Float         @default(0)
  gracePeriod   Int           @default(5)
  isOverdue     Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  userId        String
  paymentId     String?
  tenantGroupId String
  payment       Payment?      @relation("PaymentRentPayments", fields: [paymentId], references: [id])
  tenantGroup   TenantGroup   @relation("TenantGroupRentPayments", fields: [tenantGroupId], references: [id], onDelete: Cascade)
  user          User          @relation("TenantRentPayments", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, month, year])
  @@index([tenantGroupId, month, year])
  @@index([status, dueDate])
  @@index([isOverdue, dueDate])
  @@map("rent_payments")
}

model ContractSignature {
  id              String        @id @default(cuid())
  signature       String
  signedAt        DateTime      @default(now())
  rentalRequestId Int           @unique
  rentalRequest   RentalRequest @relation("ContractSignature", fields: [rentalRequestId], references: [id], onDelete: Cascade)

  @@map("contract_signatures")
}

model Contract {
  id              String         @id @default(cuid())
  contractNumber  String         @unique
  status          ContractStatus @default(SIGNED)
  pdfUrl          String?
  signedAt        DateTime?
  generationTime  Int?
  fileSize        Int?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  rentalRequestId Int?           @unique
  leaseId         String?        @unique
  contractType    ContractType   @default(ORIGINAL)
  rentalRequest   RentalRequest? @relation("Contract", fields: [rentalRequestId], references: [id], onDelete: Cascade)
  lease           Lease?         @relation("LeaseContract", fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([status, signedAt])
  @@index([contractNumber])
  @@index([contractType])
  @@map("contracts")
}

model RequestPoolAnalytics {
  id                  String   @id @default(cuid())
  totalRequests       Int      @default(0)
  activeRequests      Int      @default(0)
  matchedRequests     Int      @default(0)
  expiredRequests     Int      @default(0)
  averageResponseTime Int?
  averageMatchScore   Float?
  conversionRate      Float?
  location            String
  requestCount        Int      @default(0)
  landlordCount       Int      @default(0)
  dateBucket          DateTime

  @@unique([location, dateBucket])
  @@map("request_pool_analytics")
}

model LandlordRequestMatch {
  id              String        @id @default(cuid())
  matchScore      Float
  matchReason     String?
  isViewed        Boolean       @default(false)
  isResponded     Boolean       @default(false)
  rentalRequestId Int
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  status          String        @default("ACTIVE")
  /// Property anchoring: optional specific property this match refers to
  propertyId      String?
  organizationId  String
  organization    Organization  @relation("LandlordMatches", fields: [organizationId], references: [id], onDelete: Cascade)
  property        Property?     @relation(fields: [propertyId], references: [id])
  rentalRequest   RentalRequest @relation("RequestMatches", fields: [rentalRequestId], references: [id], onDelete: Cascade)

  @@unique([organizationId, rentalRequestId, propertyId])
  @@index([organizationId, matchScore])
  @@index([rentalRequestId, matchScore])
  @@index([isViewed, isResponded])
  @@index([propertyId])
  @@map("landlord_request_matches")
}

model Unit {
  id         String         @id @default(cuid())
  unitNumber String
  floor      Int?
  bedrooms   Int
  bathrooms  Int
  area       Float
  rentAmount Float
  status     PropertyStatus @default(AVAILABLE)
  propertyId String
  createdAt  DateTime       @default(now())
  updatedAt  DateTime       @updatedAt
  lease      Lease?         @relation("UnitLease")
  property   Property       @relation("PropertyUnits", fields: [propertyId], references: [id], onDelete: Cascade)

  @@index([propertyId, status])
  @@map("units")
}

model Lease {
  id                        String               @id @default(cuid())
  startDate                 DateTime
  endDate                   DateTime
  rentAmount                Float
  depositAmount             Float
  status                    LeaseStatus          @default(ACTIVE)
  unitId                    String               @unique
  createdAt                 DateTime             @default(now())
  updatedAt                 DateTime             @updatedAt
  offerId                   String?
  propertyId                String?
  renewalDeclinedAt         DateTime?
  renewalDeclinedByUserId   String?
  renewalStatus             LeaseRenewalStatus   @default(NONE)
  rentalRequestId           Int?
  terminationEffectiveDate  DateTime?
  terminationNoticeByUserId String?
  terminationNoticeDate     DateTime?
  terminationReason         String?
  organizationId            String?
  tenantGroupId             String
  // New fields for proper lease lifecycle management
  contractId                String?              @unique
  parentLeaseId             String?              // For renewal leases
  leaseType                 LeaseType            @default(ORIGINAL)
  renewalEffectiveDate      DateTime?            // When renewal becomes active
  offer                     Offer?               @relation("OfferLeases", fields: [offerId], references: [id])
  organization              Organization?        @relation("OrganizationLeases", fields: [organizationId], references: [id])
  property                  Property?            @relation("PropertyLeases", fields: [propertyId], references: [id])
  rentalRequest             RentalRequest?       @relation("RentalRequestLeases", fields: [rentalRequestId], references: [id])
  tenantGroup               TenantGroup          @relation("TenantGroupLeases", fields: [tenantGroupId], references: [id], onDelete: Cascade)
  unit                      Unit                 @relation("UnitLease", fields: [unitId], references: [id], onDelete: Cascade)
  contract                  Contract?            @relation("LeaseContract")
  parentLease               Lease?               @relation("LeaseRenewals", fields: [parentLeaseId], references: [id])
  renewalLeases             Lease[]              @relation("LeaseRenewals")
  maintenanceRequests       MaintenanceRequest[] @relation("LeaseMaintenance")
  occupants                 Occupant[]
  payments                  Payment[]            @relation("LeasePayments")
  renewalRequests           RenewalRequest[]
  reviewSignals             ReviewSignal[]       @relation("LeaseReviewSignals")
  reviews                   Review[]             @relation("LeaseReviews")
  moveInIssues              MoveInIssue[]        @relation("LeaseMoveInIssues")

  @@index([tenantGroupId])
  @@index([status])
  @@index([endDate])
  @@index([offerId])
  @@index([rentalRequestId])
  @@index([propertyId])
  @@index([organizationId])
  @@index([parentLeaseId])
  @@index([leaseType])
  @@map("leases")
}

model Occupant {
  id          String   @id @default(cuid())
  name        String
  email       String?
  phoneNumber String?
  leaseId     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  lease       Lease    @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId])
  @@index([email])
  @@map("occupants")
}

model RenewalRequest {
  id                  String               @id @default(cuid())
  leaseId             String
  initiatorUserId     String
  status              RenewalRequestStatus @default(PENDING)
  proposedTermMonths  Int?
  proposedStartDate   DateTime?
  proposedMonthlyRent Float?
  note                String?
  counterOfId         String?
  expiresAt           DateTime?
  decidedByUserId     String?
  decidedAt           DateTime?
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  lease               Lease                @relation(fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId, status])
  @@index([expiresAt])
  @@map("renewal_requests")
}

model Review {
  id                  String         @id @default(cuid())
  rating              Int
  comment             String
  isAnonymous         Boolean        @default(false)
  leaseId             String?
  createdAt           DateTime       @default(now())
  updatedAt           DateTime       @updatedAt
  isSystemGenerated   Boolean        @default(false)
  reviewStage         ReviewStage    @default(INITIAL)
  reviewerId          String
  targetTenantGroupId String
  revieweeId          String
  isDoubleBlind       Boolean        @default(true)
  publishAfter        DateTime?
  publishedAt         DateTime?
  redactedText        String?
  status              ReviewStatus   @default(PENDING)
  submittedAt         DateTime?
  violatesPolicy      Boolean        @default(false)
  isEarlyTermination  Boolean        @default(false)
  earlyTerminationReason String?
  excludeFromAggregates Boolean      @default(false)
  redactedAt          DateTime?
  redactedBy          String?
  stage               ReviewStage?
  stars               Int?
  targetUserId        String?
  text                String?
  revieweeDisplayName String?
  reviewerDisplayName String?
  reply               ReviewReply?   @relation("ReviewReply")
  reports             ReviewReport[] @relation("ReviewReports")
  lease               Lease?         @relation("LeaseReviews", fields: [leaseId], references: [id], onDelete: Cascade)
  reviewer            User           @relation("UserReviewsGiven", fields: [reviewerId], references: [id], onDelete: Cascade)
  targetTenantGroup   TenantGroup    @relation("TenantGroupReviewsReceived", fields: [targetTenantGroupId], references: [id], onDelete: Cascade)
  reviewee            User           @relation("UserReviewsReceived", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@unique([leaseId, reviewerId, revieweeId, reviewStage])
  @@index([leaseId])
  @@index([rating])
  @@index([reviewStage])
  @@index([reviewerId])
  @@index([targetTenantGroupId])
  @@index([revieweeId])
  @@map("reviews")
}

model ReviewReply {
  id              String   @id @default(cuid())
  reviewId        String   @unique
  revieweeId      String
  content         String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  userDisplayName String?
  review          Review   @relation("ReviewReply", fields: [reviewId], references: [id], onDelete: Cascade)
  reviewee        User     @relation("UserReviewReplies", fields: [revieweeId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([revieweeId])
  @@map("review_replies")
}

model ReviewReport {
  id                  String       @id @default(cuid())
  reviewId            String
  reporterId          String
  reason              String
  description         String?
  status              ReportStatus @default(PENDING)
  createdAt           DateTime     @default(now())
  updatedAt           DateTime     @updatedAt
  reporterDisplayName String?
  reporter            User         @relation("UserReviewReports", fields: [reporterId], references: [id], onDelete: Cascade)
  review              Review       @relation("ReviewReports", fields: [reviewId], references: [id], onDelete: Cascade)

  @@index([reviewId])
  @@index([reporterId])
  @@index([status])
  @@index([createdAt])
  @@map("review_reports")
}

model ReviewSignal {
  id              String           @id @default(cuid())
  signalType      ReviewSignalType @default(PAYMENT_CONFIRMED)
  leaseId         String
  tenantGroupId   String
  metadata        Json?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  userDisplayName String?
  lease           Lease            @relation("LeaseReviewSignals", fields: [leaseId], references: [id], onDelete: Cascade)
  tenantGroup     TenantGroup      @relation("TenantGroupReviewSignals", fields: [tenantGroupId], references: [id], onDelete: Cascade)

  @@index([leaseId])
  @@index([tenantGroupId])
  @@index([signalType])
  @@index([createdAt])
  @@map("review_signals")
}

model MaintenanceRequest {
  id          String              @id @default(cuid())
  title       String
  description String
  priority    MaintenancePriority @default(MEDIUM)
  status      MaintenanceStatus   @default(PENDING)
  leaseId     String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  lease       Lease               @relation("LeaseMaintenance", fields: [leaseId], references: [id], onDelete: Cascade)

  @@index([leaseId, status])
  @@index([priority])
  @@map("maintenance_requests")
}

model Conversation {
  id           String                    @id @default(cuid())
  title        String?
  type         ConversationType          @default(DIRECT)
  propertyId   String?
  offerId      String?
  status       ConversationStatus        @default(PENDING)
  createdAt    DateTime                  @default(now())
  updatedAt    DateTime                  @updatedAt
  participants ConversationParticipant[] @relation("ConversationParticipants")
  offer        Offer?                    @relation("ConversationOffer", fields: [offerId], references: [id])
  property     Property?                 @relation("PropertyConversations", fields: [propertyId], references: [id])
  messages     Message[]                 @relation("ConversationMessages")

  @@index([propertyId])
  @@index([type])
  @@index([status])
  @@index([offerId])
  @@index([status, offerId])
  @@map("conversations")
}

model ConversationParticipant {
  id             String          @id @default(cuid())
  conversationId String
  userId         String
  role           ParticipantRole @default(MEMBER)
  joinedAt       DateTime        @default(now())
  leftAt         DateTime?
  conversation   Conversation    @relation("ConversationParticipants", fields: [conversationId], references: [id], onDelete: Cascade)
  user           User            @relation("UserConversations", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@index([conversationId])
  @@index([userId])
  @@map("conversation_participants")
}

model Message {
  id                   String       @id @default(cuid())
  content              String
  messageType          MessageType  @default(TEXT)
  attachmentUrl        String?
  attachmentName       String?
  attachmentSize       Int?
  attachmentType       String?
  isRead               Boolean      @default(false)
  readAt               DateTime?
  conversationId       String
  senderId             String
  replyToId            String?
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  recipientDisplayName String?
  senderDisplayName    String?
  conversation         Conversation @relation("ConversationMessages", fields: [conversationId], references: [id], onDelete: Cascade)
  replyTo              Message?     @relation("MessageReplies", fields: [replyToId], references: [id])
  replies              Message[]    @relation("MessageReplies")
  sender               User         @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([conversationId, createdAt])
  @@index([senderId])
  @@index([isRead])
  @@map("messages")
}

model Notification {
  id        String           @id @default(cuid())
  userId    String
  type      NotificationType
  entityId  String
  title     String
  body      String
  isRead    Boolean          @default(false)
  createdAt DateTime         @default(now())
  user      User             @relation("UserNotifications", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, isRead, createdAt])
  @@map("notifications")
}

model SupportTicket {
  id          String                @id @default(cuid())
  userId      String
  title       String
  description String
  category    SupportTicketCategory
  priority    SupportTicketPriority
  status      SupportTicketStatus   @default(OPEN)
  assignedTo  String?
  createdAt   DateTime              @default(now())
  updatedAt   DateTime              @updatedAt
  user        User                  @relation("UserSupportTickets", fields: [userId], references: [id], onDelete: Cascade)
  messages    TicketMessage[]

  @@index([userId, status])
  @@index([category, priority])
  @@map("support_tickets")
}

model TicketMessage {
  id         String        @id @default(cuid())
  ticketId   String
  userId     String
  message    String
  isInternal Boolean       @default(false)
  createdAt  DateTime      @default(now())
  ticket     SupportTicket @relation(fields: [ticketId], references: [id], onDelete: Cascade)
  user       User          @relation("UserTicketMessages", fields: [userId], references: [id], onDelete: Cascade)

  @@index([ticketId, createdAt])
  @@map("ticket_messages")
}

model ChatSession {
  id        String            @id @default(cuid())
  userId    String
  agentId   String?
  status    ChatSessionStatus @default(WAITING)
  startedAt DateTime          @default(now())
  endedAt   DateTime?
  messages  ChatMessage[]
  user      User              @relation("UserChatSessions", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@map("chat_sessions")
}

model ChatMessage {
  id        String      @id @default(cuid())
  sessionId String
  senderId  String
  message   String
  timestamp DateTime    @default(now())
  isRead    Boolean     @default(false)
  session   ChatSession @relation(fields: [sessionId], references: [id], onDelete: Cascade)

  @@index([sessionId, timestamp])
  @@map("chat_messages")
}

model Organization {
  id                     String                 @id @default(cuid())
  name                   String
  taxId                  String?
  regNumber              String?
  address                String
  signatureBase64        String?
  createdAt              DateTime               @default(now())
  updatedAt              DateTime               @updatedAt
  isPersonal             Boolean                @default(false)
  landlordRequestMatches LandlordRequestMatch[] @relation("LandlordMatches")
  leases                 Lease[]                @relation("OrganizationLeases")
  offers                 Offer[]                @relation("OrganizationOffers")
  members                OrganizationMember[]
  properties             Property[]             @relation("OrganizationProperties")

  @@index([name])
  @@index([taxId])
  @@index([regNumber])
  @@map("organizations")
}

model OrganizationMember {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           MemberRole   @default(AGENT)
  joinedAt       DateTime     @default(now())
  leftAt         DateTime?
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation("UserOrganizations", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([userId])
  @@index([organizationId])
  @@index([role])
  @@map("organization_members")
}

model TenantGroup {
  id             String              @id @default(cuid())
  name           String
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  leases         Lease[]             @relation("TenantGroupLeases")
  offers         Offer[]             @relation("TenantGroupOffers")
  payments       Payment[]           @relation("TenantGroupPayments")
  rentPayments   RentPayment[]       @relation("TenantGroupRentPayments")
  rentalRequests RentalRequest[]     @relation("TenantGroupRequests")
  reviewSignals  ReviewSignal[]      @relation("TenantGroupReviewSignals")
  reviews        Review[]            @relation("TenantGroupReviewsReceived")
  members        TenantGroupMember[]

  @@index([name])
  @@map("tenant_groups")
}

model TenantGroupMember {
  id            String      @id @default(cuid())
  userId        String
  tenantGroupId String
  isPrimary     Boolean     @default(false)
  joinedAt      DateTime    @default(now())
  leftAt        DateTime?
  tenantGroup   TenantGroup @relation(fields: [tenantGroupId], references: [id], onDelete: Cascade)
  user          User        @relation("UserTenantGroups", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantGroupId])
  @@index([userId])
  @@index([tenantGroupId])
  @@index([isPrimary])
  @@map("tenant_group_members")
}

model AuditLog {
  id              String   @id @default(cuid())
  adminId         String
  action          String
  resourceType    String
  resourceId      String
  details         String?
  ipAddress       String?
  userAgent       String?
  timestamp       DateTime @default(now())
  userDisplayName String?
  admin           User     @relation("AdminAuditLogs", fields: [adminId], references: [id], onDelete: Cascade)

  @@index([adminId])
  @@index([resourceType, resourceId])
  @@index([timestamp])
  @@map("audit_logs")
}

model Badge {
  id          String      @id @default(cuid())
  name        String
  description String
  category    String
  icon        String
  color       String
  criteria    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userBadges  UserBadge[]

  @@index([category])
  @@map("badges")
}

model UserBadge {
  id       String   @id @default(cuid())
  userId   String
  badgeId  String
  earnedAt DateTime @default(now())
  metadata String?
  isActive Boolean  @default(true)
  badge    Badge    @relation(fields: [badgeId], references: [id], onDelete: Cascade)
  user     User     @relation("UserBadges", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, badgeId])
  @@index([userId])
  @@index([badgeId])
  @@index([earnedAt])
  @@map("user_badges")
}

model tenant_group_invitations {
  id              String    @id
  token           String    @unique
  tenant_group_id String
  invited_user_id String
  inviter_user_id String
  status          String    @default("PENDING")
  created_at      DateTime? @default(now()) @db.Timestamptz(6)
  expires_at      DateTime? @db.Timestamptz(6)
}

model MoveInIssue {
  id          String               @id @default(cuid())
  title       String
  description String
  status      MoveInIssueStatus    @default(OPEN)
  createdAt   DateTime             @default(now())
  updatedAt   DateTime             @updatedAt
  
  // Relations
  leaseId     String
  lease       Lease                @relation("LeaseMoveInIssues", fields: [leaseId], references: [id], onDelete: Cascade)
  
  // Comments for three-way communication
  comments    MoveInIssueComment[]
  
  // Admin decision fields
  adminDecision     String?     // "ACCEPTED", "REJECTED", "ESCALATED"
  adminDecisionAt   DateTime?
  adminDecisionBy   String?     // Admin user ID
  adminNotes        String?     // Admin's reasoning
  refundAmount      Float?      // Amount to refund if approved
  propertyHoldUntil DateTime?   // Property hold period end date
  
  // Resolution fields
  resolvedAt        DateTime?   // When issue was resolved/closed
  resolvedByUserId  String?     // User ID who resolved the issue
  
  // Indexes for performance
  @@index([leaseId])
  @@index([status])
  @@index([createdAt])
  @@index([adminDecision])
  @@map("move_in_issues")
}

model MoveInIssueComment {
  id        String      @id @default(cuid())
  content   String
  createdAt DateTime    @default(now())
  
  // Evidence support
  evidence  String[]    // Array of file paths
  evidenceType EvidenceType?  // IMAGE, DOCUMENT, VIDEO
  
  // Relations
  authorId  String
  author    User        @relation("UserMoveInIssueComments", fields: [authorId], references: [id], onDelete: Cascade)
  issueId   String
  issue     MoveInIssue @relation(fields: [issueId], references: [id], onDelete: Cascade)
  
  // Indexes for performance
  @@index([authorId])
  @@index([issueId])
  @@index([createdAt])
  @@map("move_in_issue_comments")
}

enum MoveInVerificationStatus {
  PENDING
  SUCCESS
  VERIFIED
  DENIED
  ISSUE_REPORTED
  CANCELLED
}

enum RenewalRequestStatus {
  PENDING
  COUNTERED
  ACCEPTED
  DECLINED
  EXPIRED
  CANCELLED
}

enum UserRole {
  TENANT
  LANDLORD
  ADMIN
}

enum RentalRequestStatus {
  ACTIVE
  LOCKED
  COMPLETED
  CANCELLED
  MATCHED
}

enum RequestPoolStatus {
  ACTIVE
  MATCHED
  EXPIRED
  CANCELLED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum OfferStatus {
  PENDING
  ACCEPTED
  REJECTED
  PAID
}

enum PaymentStatus {
  PENDING
  SUCCEEDED
  FAILED
  CANCELLED
}

enum PaymentPurpose {
  DEPOSIT
  RENT
  DEPOSIT_AND_FIRST_MONTH
}

enum ContractStatus {
  SIGNED
  COMPLETED
  EXPIRED
}

enum PaymentGateway {
  STRIPE
  PAYU
  P24
  TPAY
}

enum PropertyStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  RENTED
  UNAVAILABLE
}

enum KYCStatus {
  PENDING
  APPROVED
  REJECTED
  NOT_SUBMITTED
}

enum LeaseStatus {
  ACTIVE
  EXPIRED
  TERMINATED
  PENDING
}

enum LeaseRenewalStatus {
  NONE
  DECLINED
}

enum LeaseType {
  ORIGINAL
  RENEWAL
}

enum ContractType {
  ORIGINAL
  RENEWAL
}

enum MaintenancePriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum MaintenanceStatus {
  PENDING
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum ReviewStage {
  INITIAL
  MOVE_IN
  END_OF_LEASE
}

enum ReviewSignalType {
  PAYMENT_CONFIRMED
  DEPOSIT_RETURNED
}

enum ReviewStatus {
  PENDING
  SUBMITTED
  PUBLISHED
  BLOCKED
}

enum ReportStatus {
  PENDING
  UNDER_REVIEW
  RESOLVED
  DISMISSED
}

enum ConversationType {
  DIRECT
  GROUP
  PROPERTY
}

enum ParticipantRole {
  ADMIN
  MEMBER
  READONLY
}

enum MessageType {
  TEXT
  IMAGE
  DOCUMENT
  SYSTEM
}

enum ConversationStatus {
  PENDING
  ACTIVE
  ARCHIVED
}

enum NotificationType {
  NEW_RENTAL_REQUEST
  NEW_OFFER
  PAYMENT_CONFIRMED
  PAYMENT_FAILED
  CONTRACT_UPDATED
  CONTRACT_SIGNED
  KYC_APPROVED
  KYC_REJECTED
  PROPERTY_STATUS_CHANGED
  SYSTEM_ANNOUNCEMENT
  ACCOUNT_UPDATED
  MOVE_IN_ISSUE_REPORTED
}

enum SupportTicketCategory {
  TECHNICAL
  BILLING
  GENERAL
  EMERGENCY
  PROPERTY_ISSUE
  PAYMENT_ISSUE
}

enum SupportTicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupportTicketStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum ChatSessionStatus {
  WAITING
  ACTIVE
  ENDED
}

enum MemberRole {
  OWNER
  ADMIN
  AGENT
}

enum UserRank {
  NEW_USER
  BRONZE_TENANT
  SILVER_TENANT
  GOLD_TENANT
  PLATINUM_TENANT
  BRONZE_LANDLORD
  SILVER_LANDLORD
  GOLD_LANDLORD
  PLATINUM_LANDLORD
  DIAMOND_LANDLORD
}

enum MoveInIssueStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
  ADMIN_APPROVED    // Admin accepted the issue
  ADMIN_REJECTED    // Admin rejected the issue
  ESCALATED         // Needs further review
}



enum EvidenceType {
  IMAGE
  DOCUMENT
  VIDEO
}
