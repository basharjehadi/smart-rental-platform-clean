version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:13-alpine
    container_name: smart-rental-postgres
    environment:
      POSTGRES_DB: smart_rental
      POSTGRES_USER: smart_rental
      POSTGRES_PASSWORD: smart_rental_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - smart-rental-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U smart_rental -d smart_rental"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: smart-rental-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - smart-rental-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: smart-rental-backend
    environment:
      - NODE_ENV=development
      - DATABASE_URL=postgresql://smart_rental:smart_rental_password@postgres:5432/smart_rental
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=your_jwt_secret_here
      - SESSION_SECRET=your_session_secret_here
      - FRONTEND_URL=http://localhost:3002
    ports:
      - "3001:3001"
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./uploads:/app/uploads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - smart-rental-network
    command: npm start

  # Frontend Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: smart-rental-frontend
    environment:
      - VITE_API_URL=http://localhost:3001/api
    ports:
      - "3002:80"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - smart-rental-network
    command: []

  # Nginx Reverse Proxy (for production-like setup)
  nginx:
    image: nginx:alpine
    container_name: smart-rental-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - smart-rental-network
    profiles:
      - production

  # Adminer (Database Management)
  adminer:
    image: adminer:latest
    container_name: smart-rental-adminer
    ports:
      - "8080:8080"
    environment:
      ADMINER_DEFAULT_SERVER: postgres
    depends_on:
      - postgres
    networks:
      - smart-rental-network
    profiles:
      - tools

  # Redis Commander (Redis Management)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: smart-rental-redis-commander
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    depends_on:
      - redis
    networks:
      - smart-rental-network
    profiles:
      - tools

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

networks:
  smart-rental-network:
    driver: bridge 